{
  "summary": "Validated oracle specs against a shared schema, expanded gate telemetry with side-effect summaries, and made the CLI default to bundled specs while skipping gracefully when no files match.",
  "checklist": [
    {
      "id": "P1",
      "status": "implemented",
      "notes": "Added oracle schema validation, richer side-effect reporting during gates, and CLI defaults for bundled specs with skip messaging."
    }
  ],
  "architecture": {
    "components_added": [
      {
        "name": "side-effects evaluator",
        "path": "scripts/lib/side-effects.mjs",
        "role": "workflow"
      },
      {
        "name": "oracle spec schema",
        "path": "spec/oracle.schema.json",
        "role": "infra"
      }
    ],
    "components_modified": [
      {
        "path": "tm.mjs",
        "reason": "Validate oracle specs, aggregate per-module side-effect telemetry, and emit richer gate summaries."
      },
      {
        "path": "docs/oracles.md",
        "reason": "Document schema validation, CLI defaults, and the new side-effect telemetry blocks."
      }
    ],
    "data_flow": "Oracle specs are validated via Ajv before execution; shipping tests and oracles feed side-effect events into a per-module accumulator that emits telemetry and populates the gate summary.",
    "state_management": "Gate summaries cache aggregated side-effect observations keyed by module until publishing at the end of the run.",
    "invariants": [
      "Invalid oracle specs fail with E_ORACLE_SPEC prior to running any scripts.",
      "Side-effect summaries must never report filesystem writes outside a module root without triggering E_SIDEEFFECTS_FORBIDDEN."
    ],
    "tradeoffs": [
      "Limiting side-effect samples to the first few paths/commands keeps telemetry lightweight but may omit later operations."
    ],
    "alternatives_considered": [
      {
        "option": "Defer schema validation until after running each case",
        "rejected_because": "Errors would surface mid-run with partial telemetry instead of providing actionable upfront feedback."
      }
    ],
    "open_questions": [
      "Should oracle executions emit their own aggregated side-effect summaries similar to gates?"
    ]
  },
  "tests": {
    "added": [],
    "how_to_run": "node tm.mjs gates shipping --compose examples/compose.json --modules-root examples/modules --with-oracles --oracle-spec oracles/specs/git.diff.core.json"
  },
  "metrics": {
    "files_changed": 5,
    "insertions": 525,
    "deletions": 136
  },
  "decisions": [
    {
      "option": "Validate oracle specs with JSON Schema before execution",
      "rationale": "Catching authoring mistakes early avoids running flaky or malformed scripts and provides clearer diagnostics for operators.",
      "rejected_alternatives": [
        {
          "variant": "Rely on manual normalization errors",
          "reason": "Normalization misses structural issues (e.g. wrong property types) that schema validation detects immediately.",
          "confidence": 0.5
        }
      ]
    }
  ],
  "risks": [
    "Schema or telemetry changes may require future adjustments as new oracle fields are introduced."
  ],
  "residual_risks": [
    "Aggregated side-effect telemetry could still miss edge cases when modules spawn many unique commands beyond the sample limit."
  ],
  "followups": [
    {
      "title": "Surface side-effect summaries for standalone oracle runs",
      "priority": "P2",
      "owner": "Platform",
      "pointer": "tm.mjs#runOracles"
    }
  ],
  "todos": [
    "Expose configuration for side-effect sample limits if teams need deeper telemetry."
  ],
  "confidence": 0.6
}
