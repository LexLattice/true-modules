name: ci

on:
  push:
  pull_request:

jobs:
  schemas:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Compile schemas
        run: npm run schema:compile

  composer_gates:
    runs-on: ubuntu-latest
    needs: schemas
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Composer and gates checks
        run: |
          set -euo pipefail
          mkdir -p artifacts tmp

          echo "::group::Meta deterministic compose"
          node tm.mjs meta \
            --coverage examples/coverage.json \
            --profile conservative \
            --out artifacts/meta.compose.first.json \
            --emit-events \
            --events-out artifacts/meta.events.ndjson \
            --strict-events
          node tm.mjs meta \
            --coverage examples/coverage.json \
            --profile conservative \
            --out artifacts/meta.compose.second.json \
            --strict-events
          if ! diff -u artifacts/meta.compose.first.json artifacts/meta.compose.second.json; then
            echo "Meta compose output differs across runs" >&2
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::Compose with overrides"
          node tm.mjs compose \
            --compose examples/compose.greedy.json \
            --modules-root examples/modules \
            --overrides examples/compose.overrides/overrides.json \
            --out examples/winner \
            --emit-events \
            --events-out artifacts/compose.overrides.ndjson \
            --strict-events
          echo "::endgroup::"

          echo "::group::Duplicate provider fails"
          if node tm.mjs compose --compose examples/dup-provider/compose.fail.json --modules-root examples/modules --out tmp/dup-fail 2>tmp/dup-fail.log; then
            echo "Expected compose.fail.json to raise E_DUP_PROVIDER" >&2
            exit 1
          fi
          if ! grep -q "E_DUP_PROVIDER" tmp/dup-fail.log; then
            echo "E_DUP_PROVIDER not found in failure output" >&2
            cat tmp/dup-fail.log >&2
            exit 1
          fi
          echo "::endgroup::"

          echo "::group::Duplicate provider explain"
          node tm.mjs compose --compose examples/dup-provider/compose.ok.json --modules-root examples/modules --out tmp/dup-pass --explain
          echo "::endgroup::"

          echo "::group::TypeScript composer scaffold"
          node runtimes/ts/composer/index.mjs --compose examples/compose.json --modules-root examples/modules --glue-root glue-catalog --out tmp/ts-winner
          echo "::endgroup::"

          echo "::group::Gates (shipping)"
          node tm.mjs gates shipping \
            --compose examples/compose.greedy.json \
            --modules-root examples/modules \
            --overrides examples/compose.overrides/overrides.json \
            --emit-events \
            --events-out artifacts/events.ndjson \
            --strict-events
          echo "::endgroup::"

      - name: Verify event streams
        run: |
          jq -c . artifacts/compose.overrides.ndjson > /dev/null
          jq -c . artifacts/events.ndjson > /dev/null
          jq -c . artifacts/meta.events.ndjson > /dev/null

      - name: Validate sample events
        run: node tm.mjs events validate --in examples/events.ndjson --strict

      - name: Validate gate events
        run: node tm.mjs events validate --in artifacts/events.ndjson --strict

      - name: Validate meta events
        run: node tm.mjs events validate --in artifacts/meta.events.ndjson --strict

      - name: Replay gate events
        run: node tm.mjs events replay --in artifacts/events.ndjson --out artifacts/timeline.txt --strict

      - name: Replay meta events
        run: node tm.mjs events replay --in artifacts/meta.events.ndjson --out artifacts/meta.timeline.txt --strict


      - name: Extract override summary
        run: |
          node -e "const fs=require('fs');const raw=fs.readFileSync('artifacts/compose.overrides.ndjson','utf8');const lines=raw.split(/\n+/).map(l=>l.trim()).filter(Boolean);if(lines.length===0){throw new Error('compose overrides event stream empty');}const events=lines.map(l=>JSON.parse(l));const evt=events.find(e=>e.event==='COMPOSE_OVERRIDES_APPLIED');if(!evt){throw new Error('COMPOSE_OVERRIDES_APPLIED not found');}fs.writeFileSync('artifacts/compose.overrides.summary.json', JSON.stringify(evt.detail ?? {}, null, 2));"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: composer-events
          path: |
            artifacts/compose.overrides.ndjson
            artifacts/compose.overrides.summary.json
            artifacts/events.ndjson
            artifacts/timeline.txt
            artifacts/meta.events.ndjson
            artifacts/meta.timeline.txt
          if-no-files-found: warn

  headless_cloud:
    runs-on: ubuntu-latest
    needs: schemas
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run headless Codex loop
        env:
          CODEX_BIN: node scripts/tests/codex-cloud-stub.mjs
        run: |
          set -euo pipefail
          RUN_DIR=runs/ci-headless
          rm -rf "$RUN_DIR"
          node scripts/bo4-loop.mjs --task demo-headless --coverage examples/coverage.json --run-dir "$RUN_DIR"
          cat "$RUN_DIR/run.json"

      - name: Validate headless events
        run: |
          node tm.mjs events validate --in runs/ci-headless/artifacts/events.ndjson --strict

  rust_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            runtimes/rust/ports/target
            runtimes/rust/composer/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cargo check (ports/composer)
        run: |
          cd runtimes/rust/ports && cargo check
          cd ../composer && cargo check
