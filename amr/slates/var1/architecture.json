{
  "modules": [
    {
      "id": "ui.shell",
      "purpose": "Owns the workflow console layout, routes operator intents to visualization, configuration, and authoring surfaces, and enforces session policy.",
      "interfaces": [
        {
          "name": "Shell.load",
          "input": { "$ref": "schema.ShellLoadRequest" },
          "output": { "$ref": "schema.ShellLoadResponse" },
          "errors": ["E_UNAUTH", "E_STATE_UNAVAILABLE"],
          "pre": ["request.user.role in ['operator', 'observer', 'admin']"],
          "post": ["response.activePanels >= 2", "response.nav.items != []"]
        },
        {
          "name": "Shell.routeEvent",
          "input": { "$ref": "schema.UIEvent" },
          "output": { "$ref": "schema.UIRouteAck" },
          "errors": ["E_EVENT_REJECTED", "E_THROTTLED"],
          "pre": ["event.source in ['workflow', 'configurator', 'codex']"],
          "post": ["ack.accepted implies event.forwarded_to != null"]
        }
      ],
      "invariants": [
        "Maintains RBAC-scoped feature toggles before dispatching events (supports REQ-UI-2, REQ-UI-3)",
        "Refreshes shell state if run snapshot timestamp is older than 5s"
      ]
    },
    {
      "id": "ui.workflow_surface",
      "purpose": "Visualizes AMR â†’ Bo4 workflow stages with dependencies, artifact cards, and live status badges (REQ-UI-1).",
      "interfaces": [
        {
          "name": "WorkflowSurface.render",
          "input": { "$ref": "schema.WorkflowSnapshot" },
          "output": { "$ref": "schema.RenderResult" },
          "errors": ["E_LAYOUT", "E_DATA_STALE"],
          "pre": ["snapshot.stages.length >= 4"],
          "post": ["result.sections == snapshot.stages.length", "result.lastUpdated == snapshot.generatedAt"]
        },
        {
          "name": "WorkflowSurface.drillDown",
          "input": { "$ref": "schema.StageDrilldownRequest" },
          "output": { "$ref": "schema.StageDrilldownView" },
          "errors": ["E_ARTIFACT_MISSING", "E_PERMISSION"],
          "pre": ["request.stageId exists in latest workflow snapshot index"],
          "post": ["view.artifacts.length >= 0"]
        }
      ],
      "invariants": [
        "Updates render within 2s of RunStateGateway update emission",
        "Shows dependency blockers before allowing stage action buttons"
      ]
    },
    {
      "id": "ui.configurator",
      "purpose": "Collects and validates run parameters before kickoff, including variant counts, brief depth, reviewer bots, and follow-up policy (REQ-UI-2).",
      "interfaces": [
        {
          "name": "RunConfigurator.loadTemplate",
          "input": { "$ref": "schema.ConfigTemplate" },
          "output": { "$ref": "schema.ConfigFormState" },
          "errors": ["E_TEMPLATE_MISSING", "E_ROLE_FORBIDDEN"],
          "pre": ["template.version != null"],
          "post": ["state.fields.variantCount.default != null"]
        },
        {
          "name": "RunConfigurator.submit",
          "input": { "$ref": "schema.ConfigSubmission" },
          "output": { "$ref": "schema.ConfigSubmissionResult" },
          "errors": ["E_VALIDATION", "E_CONFLICT"],
          "pre": ["submission.variantCount > 0"],
          "post": ["result.valid implies result.manifestRef != null"]
        }
      ],
      "invariants": [
        "Blocks kickoff until CLIBridge.validateManifest returns success",
        "Caches last successful submission per operator session for replay (REQ-UI-4)"
      ]
    },
    {
      "id": "ui.codex_composer",
      "purpose": "Embeds Codex-guided drafting panes for briefs, requirements, and slate notes with inline validation prompts (REQ-UI-3).",
      "interfaces": [
        {
          "name": "CodexComposer.requestAssistance",
          "input": { "$ref": "schema.CodexPrompt" },
          "output": { "$ref": "schema.CodexSuggestionStream" },
          "errors": ["E_CODEX", "E_INPUT_GUARD"],
          "pre": ["prompt.intent in ['draft_brief', 'draft_requirement', 'draft_note']"],
          "post": ["stream.suggestions.length >= 1"]
        },
        {
          "name": "CodexComposer.publishDraft",
          "input": { "$ref": "schema.CodexDraft" },
          "output": { "$ref": "schema.DraftPublishAck" },
          "errors": ["E_VALIDATION", "E_SYNC"],
          "pre": ["draft.channel in ['briefs', 'requirements', 'slate_notes']"],
          "post": ["ack.persisted == true implies ack.uri != null"]
        }
      ],
      "invariants": [
        "Sanitizes Codex responses to strip credentials before render",
        "Logs rejected prompts for anomaly review via HistoryStore"
      ]
    },
    {
      "id": "svc.run_state_gateway",
      "purpose": "Aggregates run manifests, CLI telemetry, and AMR/Bo4 stage updates into consumable snapshots for the UI.",
      "interfaces": [
        {
          "name": "RunStateGateway.fetchSnapshot",
          "input": { "$ref": "schema.RunIdentifier" },
          "output": { "$ref": "schema.WorkflowSnapshot" },
          "errors": ["E_RUN_NOT_FOUND", "E_BACKEND_DOWN"],
          "pre": ["identifier.runId != ''"],
          "post": ["snapshot.runId == identifier.runId"]
        },
        {
          "name": "RunStateGateway.subscribeUpdates",
          "input": { "$ref": "schema.RunIdentifier" },
          "output": { "$ref": "schema.WorkflowSnapshotStream" },
          "errors": ["E_STREAM_TIMEOUT", "E_AUTHZ"],
          "pre": ["identifier.actor.canView == true"],
          "post": ["stream.interval_seconds <= 5"]
        }
      ],
      "invariants": [
        "Rejects snapshots older than 10s to keep visualization fresh (REQ-UI-1)",
        "Normalizes stage dependency graph before emission"
      ]
    },
    {
      "id": "svc.run_configuration",
      "purpose": "Validates operator inputs, builds Bo4/AMR run manifests, and coordinates persistence for replay.",
      "interfaces": [
        {
          "name": "RunConfigurationService.prepareManifest",
          "input": { "$ref": "schema.ConfigSubmission" },
          "output": { "$ref": "schema.RunManifest" },
          "errors": ["E_SCHEMA", "E_LIMIT_EXCEEDED"],
          "pre": ["submission.variantCount <= service.limits.variantCount.max"],
          "post": ["manifest.parameters.variantCount == submission.variantCount"]
        },
        {
          "name": "RunConfigurationService.persistDefaults",
          "input": { "$ref": "schema.ConfigSubmission" },
          "output": { "$ref": "schema.PersistResult" },
          "errors": ["E_STORAGE", "E_VERSION_SKEW"],
          "pre": ["submission.createdBy != null"],
          "post": ["result.saved == true implies result.version != null"]
        }
      ],
      "invariants": [
        "Mirrors tm.mjs manifest schema when serializing",
        "Enforces follow-up policy contract before kickoff (REQ-UI-2)"
      ]
    },
    {
      "id": "svc.codex_adapter",
      "purpose": "Mediates Codex API usage with prompt templating, rate limits, and policy enforcement for authoring workflows (REQ-UI-3).",
      "interfaces": [
        {
          "name": "CodexAdapter.generate",
          "input": { "$ref": "schema.CodexPrompt" },
          "output": { "$ref": "schema.CodexSuggestion" },
          "errors": ["E_PROVIDER", "E_POLICY_BLOCK"],
          "pre": ["prompt.context.tokens <= 8000"],
          "post": ["suggestion.metadata.policyChecked == true"]
        },
        {
          "name": "CodexAdapter.redact",
          "input": { "$ref": "schema.CodexSuggestion" },
          "output": { "$ref": "schema.CodexSuggestion" },
          "errors": ["E_REDACT"],
          "pre": ["suggestion.content != null"],
          "post": ["result.content does not contain secret patterns"]
        }
      ],
      "invariants": [
        "Caches prompts per session for 60s to reduce latency",
        "Drops provider responses that fail schema validation"
      ]
    },
    {
      "id": "svc.history_store",
      "purpose": "Persists configuration presets, run manifests, and resulting telemetry for replay/export scenarios (REQ-UI-4).",
      "interfaces": [
        {
          "name": "HistoryStore.appendRun",
          "input": { "$ref": "schema.RunHistoryRecord" },
          "output": { "$ref": "schema.HistoryReceipt" },
          "errors": ["E_STORAGE", "E_DUPLICATE"],
          "pre": ["record.runId != null"],
          "post": ["receipt.saved == true"]
        },
        {
          "name": "HistoryStore.loadHistory",
          "input": { "$ref": "schema.HistoryQuery" },
          "output": { "$ref": "schema.HistoryList" },
          "errors": ["E_PERMISSION", "E_NOT_FOUND"],
          "pre": ["query.userId != null"],
          "post": ["list.items.every(item => item.runId != null)"]
        }
      ],
      "invariants": [
        "Stores manifests versioned by tm.mjs commit hash",
        "Encrypts reviewer bot assignments at rest"
      ]
    },
    {
      "id": "svc.cli_bridge",
      "purpose": "Invokes existing tm.mjs and supporting scripts to validate manifests, kickoff runs, and stream results to the UI orchestration layer.",
      "interfaces": [
        {
          "name": "CLIBridge.validateManifest",
          "input": { "$ref": "schema.RunManifest" },
          "output": { "$ref": "schema.ValidationReport" },
          "errors": ["E_CLI_FAILURE", "E_TIMEOUT"],
          "pre": ["manifest.parameters.variantCount > 0"],
          "post": ["report.status in ['ok', 'error']"]
        },
        {
          "name": "CLIBridge.kickoffRun",
          "input": { "$ref": "schema.RunManifest" },
          "output": { "$ref": "schema.KickoffReceipt" },
          "errors": ["E_CLI_FAILURE", "E_CONFLICT"],
          "pre": ["manifest.readyForLaunch == true"],
          "post": ["receipt.runId == manifest.runId"]
        },
        {
          "name": "CLI.status",
          "input": { "$ref": "schema.RunIdentifier" },
          "output": { "$ref": "schema.ValidationReport" },
          "errors": ["E_CLI_FAILURE"],
          "pre": ["identifier.runId != ''"],
          "post": ["report.status in ['ok','error']"]
        }
      ],
      "invariants": [
        "Serializes CLI invocations to avoid concurrent tm.mjs runs",
        "Captures stderr for HistoryStore audit trail"
      ]
    }
  ],
  "edges": [
    { "from": "ui.shell", "to": "svc.run_state_gateway", "contract": "RunStateGateway.fetchSnapshot" },
    { "from": "ui.shell", "to": "ui.workflow_surface", "contract": "WorkflowSurface.render" },
    { "from": "ui.shell", "to": "ui.configurator", "contract": "RunConfigurator.loadTemplate" },
    { "from": "ui.workflow_surface", "to": "svc.run_state_gateway", "contract": "RunStateGateway.subscribeUpdates" },
    { "from": "ui.configurator", "to": "svc.run_configuration", "contract": "RunConfigurationService.prepareManifest" },
    { "from": "ui.configurator", "to": "svc.history_store", "contract": "HistoryStore.loadHistory" },
    { "from": "ui.codex_composer", "to": "svc.codex_adapter", "contract": "CodexAdapter.generate" },
    { "from": "svc.run_configuration", "to": "svc.cli_bridge", "contract": "CLIBridge.validateManifest" },
    { "from": "svc.run_configuration", "to": "svc.history_store", "contract": "HistoryStore.appendRun" },
    { "from": "svc.run_state_gateway", "to": "svc.history_store", "contract": "HistoryStore.loadHistory" },
    { "from": "svc.cli_bridge", "to": "svc.run_state_gateway", "contract": "RunStateGateway.fetchSnapshot" }
  ],
  "schemas_ref": "schemas.json"
}
